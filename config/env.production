# Note: you should rename this file to make it hidden (.env.xxx instead of env.xxx)

# If using Visual Studio Code consider to install the DotENV extension


########## AHOI API ##########

# Crendentials from AHOI registration: https://banking-sandbox.starfinanz.de/sandboxmanager/#/register
AHOI_CLIENTID = ''
AHOI_CLIENTSECRET = ''
AHOI_APPSECRETIV = ''
AHOI_APPSECRETKEY = ''
AHOI_BASEURL = 'https://banking.starfinanz.de/ahoi/api/v2'
# Used to internally encrypt the installation id's for advanced security
# Think up any password or leave it empty if you want to encrypt the installationid yourself
AHOI_CRYPTKEY = ''



########## SERVER ##########

SERVER_ADDRESS = '127.0.0.1'
SERVER_PORT = 3000

# In production a proxy server like NGINX should be used to handle load balancing, SSL termination
# and more
BEHIND_PROXY = true

# May be used to specify proxy ip settings and more, see
# https://expressjs.com/en/4x/api.html#trust.proxy.options.table 
TRUST_PROXY_SETTING = ''

DEFAULT_HTTP_HEADERS = 'file:./config/default-http-headers.json'
DEFAULT_HTTP_HEADERS_STATIC = 'file:./config/default-http-headers-static.json'

# use fastify or express as web framework
USE_FASTIFY=true
# Set the compatibiltiy with Express. Only needed, if Fastify is used as engine.
# Values from 1 - 4 are possible. This may affect the overall performance
# 1 = better compatibility but less performance, 4 = less compatibility but better performance
FASTIFY_COMPAT_LEVEL = 4



########## Authentication settings ##########

# Allows to disable authentication during development
ENABLE_AUTHENTICATION = false

# Note: a valid mail server configuration is required
AUTH_EMAIL_CONFIRMATION_REQUIRED = false

LOGIN_ENDPOINT = '/login'
REGISTRATION_ENDPOINT = '/registration'
DELETE_ACCOUNT_ENDPOINT = '/deleteaccount'

# The public and private RSA key are provided here only for demo purposes.
# You should generate your own keys using online service like
# http://travistidwell.com/jsencrypt/demo/ or use the script 'generate-rsa-keys.sh' in root folder
# for mac and linux. Windows user can use Putty, see for example here:
# https://blog.fabioiotti.com/generate-rsa-key/ (Windows TL;DR)
#
# Note: you have to use absolute paths
AUTH_JWT_PRIVATE_KEY = 'file:./config/private_key.pem'
AUTH_JWT_PUBLIC_KEY = 'file:./config/public_key.pem'



########## Logging ##########

ENABLE_WINSTON_LOGGER = true
ENABLE_SERVER_LOG = true
LOG_FOLDER = './logs'
LOG_LEVEL = 'error'
LOG_LEVEL_CONSOLE = 'warn'
# Uncomment to start express in debug mode
# DEBUG='express*''



########## SERVER MIDDLEWARE AND SECURITY HEADERS ##########

# The compression middleware should not be used in production environment. Instead you should use a
# loadbalancer or reverse proxy like NGINX with compression enabled. That provides a better 
# performance
USE_GZIP = false

ALLOW_FILE_UPLOAD = false

DEFAULT_HTTP_HEADERS = 'file:./config/default-http-headers.json'
DEFAULT_HTTP_HEADERS_STATIC = 'file:./config/default-http-headers-static.json'



########## DATABASE ##########

# This service uses MongoDB or TingoDB (https://github.com/sergeyksv/tingodb) to store data.
# The TingoDB is contained in the tungus module (https://github.com/anhoev/tungus.git).
# Default configuration in development uses TingoDB to allow easy startup without installing a
# database. At least in production environment you should use a MongoDB with encryption
# (https://docs.mongodb.com/manual/tutorial/configure-encryption/) 

# There are various options how to install or use MongoDB:
# 1. Install local: https://docs.mongodb.com/manual/installation/#mongodb-community-edition
# 2. Install local using docker: https://hub.docker.com/r/bitnami/mongodb/
# 3. Use a cloud service like MongoDB Atlas (https://www.mongodb.com/cloud/atlas) or mLab (https://mlab.com)
# 4. Other options :-)

USE_TINGODB = true
MONGODB_URI=mongodb://.tingodbdata
# MONGODB_URI=mongodb://localhost:27017

# If using MongoDB with encryption there is no need for the mongoose-encrypt plugin. If using
# TingoDB, it is recommended to store data encrypted using the mongoose-encrypt plugin.
# The secret keys are provided only for demo purposes here. You can generate your own keys using the
# script 'generate-mongoose-enc-keys.sh' for mac and linux in root folder. Maybe you have to execute
# chmod +x generate-mongoose-enc-keys.sh before to make the script executable.
# On Windows you can run the js script with `node generate-mongoose-enc-keys.js` 
USE_MONGOOSE_ENCRYPTION = true
MONGOOSE_ENCRYPT_SECRET = ''
MONGOOSE_ENCRYPT_SIGNKEY = ''



########## Email server ##########

# If you don't have a local mail server installed, you can use a cloud service like
# https://mailtrap.io
EMAIL_FROM = '"Max Mustermann" <max.mustermann@xyz.com>'
EMAIL_SUBJECT = 'Bitte Email best√§tigen'
EMAIL_HOST = 'localhost'
EMAIL_PORT = '465'
EMAIL_USER = ''
EMAIL_PASSWORD = ''
EMAIL_SECURE = true
# EMAIL_TLS = '{}'
# EMAIL_IGNORE_TLS = true
# EMAIL_REQUIRE_TLS = false
